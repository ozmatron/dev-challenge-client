{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.typingTimer = null;\n\n    this.taskHandler = event => {\n      console.log(event.target.value); // this.setState(prevState => {\n      //   let tasks = Object.assign({}, prevState.tasks);  // creating copy of state variable jasper\n      //   tasks.task = event.target.value;                     // update the name property, assign a new value                 \n      //   return { tasks };                                 // return new object jasper object\n      // })\n\n      const newList = this.state.taskList.slice();\n      newList[event.target.id] = event.target.value;\n      this.setState({\n        taskList: newList\n      }); // const val = event.target.value;\n      //    clearTimeout(this.typingTimer);\n      //    this.typingTimer = setTimeout(() => {\n      //     if (val) {\n      //       // console.log(\"fupps\",event.target.value)\n      //       // this.submitUpdates()\n      //       // window.alert('Stopped typing !');\n      //     }\n      //    }, 500);\n    };\n\n    this.completeHandler = event => {\n      const newList = this.state.completeList.slice();\n\n      if (event.target.value === \"on\") {\n        newList[event.target.id] = true;\n      } else {\n        newList[event.target.id] = false;\n      }\n\n      this.setState({\n        completeList: newList\n      });\n    };\n\n    this.state = {\n      taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\", \"Task 7\"],\n      completeList: [false, false, false, false, false, false],\n      userId: null,\n      getTasks: false,\n      tasks: []\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`).then(response => {\n      this.setState({\n        userId: response.data.id\n      });\n    });\n  }\n\n  getTasks() {\n    const newTaskList = this.state.taskList.slice();\n    const newCompList = this.state.completeList.slice();\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId).then(response => {\n      response.data.map((task, i) => newTaskList[i] = task.task);\n      response.data.map((task, i) => newCompList[i] = task.complete);\n      console.log(response);\n      this.setState({\n        taskList: newTaskList\n      });\n      this.setState({\n        completeList: newCompList\n      });\n      this.setState({\n        getTasks: true\n      });\n      this.setState({\n        tasks: response.data\n      });\n    });\n  }\n\n  submitUpdates() {// this.state.taskList.map((task) => \n    //     // !task.startsWith(\"Task \") ? this.postTask(task) : null\n    //     this.postTask(task)\n    //   );\n  }\n\n  postTask(task) {\n    axios.post(`http://localhost:8080/api/task`, {\n      task: task,\n      complete: false,\n      user_id: this.state.userId\n    }).then(res => {// this.props.history.push(res.data)\n    });\n  }\n\n  render() {\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n\n    let inputs;\n    let checkboxes; // console.log(\"tasks\",this.state.tasks)\n\n    if (this.state.tasks !== {}) {\n      inputs = this.state.tasks.map((task, index) => /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        id: task.id,\n        value: task.task,\n        onChange: this.taskHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }\n      }));\n      checkboxes = this.state.tasks.map((task, index) => task.complete == true ? /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: task.id,\n        onChange: this.completeHandler,\n        checked: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: index,\n        onChange: this.completeHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }\n      }));\n    } // inputs = this.state.taskList.map((task, index) => (\n    //   <input\n    //     type='text'\n    //     id= {index}\n    //     value = {task.task}\n    //     onChange={this.taskHandler}\n    //     />\n    // ));\n    // checkboxes = this.state.completeList.map((checkbox, index) => (\n    //     checkbox.complete == true ?\n    //     <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       checked\n    //       /> :\n    //       <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       />\n    // ));\n\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }\n    }, inputs, checkboxes));\n  }\n\n}\n\nexport default TasksEditor;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js"],"names":["React","axios","TasksEditor","Component","constructor","props","typingTimer","taskHandler","event","console","log","target","value","newList","state","taskList","slice","id","setState","completeHandler","completeList","userId","getTasks","tasks","componentDidMount","getUserId","get","then","response","data","newTaskList","newCompList","map","task","i","complete","submitUpdates","postTask","post","user_id","res","render","inputs","checkboxes","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\", \"Task 7\"],\n        completeList: [false, false,false,false,false,false],\n        userId: null,\n        getTasks: false,\n        tasks: []\n    };\n  }\n\n  typingTimer = null;\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`)\n    .then((response) => {\n      this.setState({userId: response.data.id})\n    })\n  }\n\n  getTasks() {\n    const newTaskList = this.state.taskList.slice()\n    const newCompList = this.state.completeList.slice()\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId)\n    .then((response) => {\n        response.data.map((task,i) => \n          newTaskList[i] = task.task\n        );\n        response.data.map((task,i) => \n          newCompList[i] = task.complete,\n      );\n      console.log(response)\n        this.setState({taskList: newTaskList})\n        this.setState({completeList: newCompList})\n        this.setState({getTasks: true})\n        this.setState({tasks: response.data})\n      })\n  }\n\n  taskHandler = (event) => {\n    console.log(event.target.value)\n    // this.setState(prevState => {\n    //   let tasks = Object.assign({}, prevState.tasks);  // creating copy of state variable jasper\n    //   tasks.task = event.target.value;                     // update the name property, assign a new value                 \n    //   return { tasks };                                 // return new object jasper object\n    // })\n\n\n    const newList = this.state.taskList.slice()\n    newList[event.target.id] = event.target.value\n    this.setState({taskList: newList})\n    // const val = event.target.value;\n    //    clearTimeout(this.typingTimer);\n    //    this.typingTimer = setTimeout(() => {\n    //     if (val) {\n    //       // console.log(\"fupps\",event.target.value)\n    //       // this.submitUpdates()\n    //       // window.alert('Stopped typing !');\n    //     }\n    //    }, 500);\n  }\n\n  completeHandler = (event) => {\n    const newList = this.state.completeList.slice()\n    if (event.target.value === \"on\") {\n      newList[event.target.id] = true\n    }\n    else {\n      newList[event.target.id] = false\n    }\n    this.setState({completeList: newList})\n  }\n\n  submitUpdates() {\n    // this.state.taskList.map((task) => \n    //     // !task.startsWith(\"Task \") ? this.postTask(task) : null\n    //     this.postTask(task)\n    //   );\n  }\n\n  postTask(task) {\n    axios.post(`http://localhost:8080/api/task`, {\n      task: task,\n      complete: false,\n      user_id: this.state.userId\n      })\n      .then(res => {\n          // this.props.history.push(res.data)\n      })\n  }\n\n  render() {\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n    let inputs\n    let checkboxes\n    // console.log(\"tasks\",this.state.tasks)\n    if (this.state.tasks !== {}) {\n      inputs = this.state.tasks.map((task, index) => \n          <input\n          type='text'\n          id= {task.id}\n          value = {task.task}\n          onChange={this.taskHandler}\n          />\n        );\n        checkboxes = this.state.tasks.map((task, index) =>\n              task.complete == true ?\n              <input \n                type=\"checkbox\" \n                id={task.id}\n                onChange={this.completeHandler}\n                checked\n                /> :\n                <input \n                type=\"checkbox\" \n                id={index}\n                onChange={this.completeHandler}\n                />\n        );\n    }\n    // inputs = this.state.taskList.map((task, index) => (\n    //   <input\n    //     type='text'\n    //     id= {index}\n    //     value = {task.task}\n    //     onChange={this.taskHandler}\n    //     />\n    // ));\n    // checkboxes = this.state.completeList.map((checkbox, index) => (\n    //     checkbox.complete == true ?\n    //     <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       checked\n    //       /> :\n    //       <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       />\n  // ));\n    return (\n    <React.Fragment>\n      <form>\n        {inputs}\n        {checkboxes}\n      </form>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default TasksEditor ;"]},"metadata":{},"sourceType":"module"}