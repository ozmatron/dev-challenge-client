{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/weather.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: 51.4939446,\n      lon: -0.0841836,\n      temp: null,\n      weather: null,\n      locationName: null\n    };\n  }\n\n  componentDidMount() {\n    var lat = null;\n    var lon = null;\n\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        if (position.coords.latitude && position.coords.longitude) {\n          // console.log(\"Latitude is :\", position.coords.latitude);\n          // console.log(\"Longitude is :\", position.coords.longitude);\n          lat = position.coords.latitude;\n          lon = position.coords.longitude;\n        }\n      }); // if (lat && lon) {\n      //     this.setState({lat: lat}) \n      //     this.setState({lon: lon});\n      // }\n    }\n\n    this.getWeather();\n  }\n\n  getWeather() {\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=d0a10211ea3d36b0a6423a104782130e`).then(response => {\n      console.log(response.data.weather[0]);\n      this.setState({\n        temp: Math.round(response.data.main.temp - 273.15)\n      });\n      this.setState({\n        weather: response.data.weather[0].main\n      });\n      this.setState({\n        locationName: response.data.name\n      });\n    });\n  }\n\n  render() {\n    console.log(\"duff\", this.state);\n    let imgsrc;\n\n    if (this.state.weather === \"Clouds\") {\n      imgsrc = './styles/assets/Clouds.png';\n    }\n\n    if (this.state.weather === \"Clouds\") {\n      imgsrc = './styles/assets/Clouds.png';\n    }\n\n    let img;\n    img = /*#__PURE__*/React.createElement(\"img\", {\n      src: \"./styles/assets/\",\n      alt: \"Logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, \"img\")), /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, this.state.temp, \" degress\"))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, this.state.locationName))));\n  }\n\n}\n\nexport default WeatherPreview;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/weather.js"],"names":["React","axios","Grid","Row","Col","WeatherPreview","Component","constructor","props","state","lat","lon","temp","weather","locationName","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getWeather","get","then","response","console","log","data","setState","Math","round","main","name","render","imgsrc","img"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        lat: 51.4939446,\n        lon: -0.0841836,\n        temp: null,\n        weather: null,\n        locationName: null\n    };\n  }\n\n  componentDidMount() {\n    var lat = null\n    var lon = null\n    if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition(function(position) {       \n            if (position.coords.latitude && position.coords.longitude) {\n                // console.log(\"Latitude is :\", position.coords.latitude);\n                // console.log(\"Longitude is :\", position.coords.longitude);\n                lat = position.coords.latitude;\n                lon = position.coords.longitude\n            }\n          });\n        // if (lat && lon) {\n        //     this.setState({lat: lat}) \n        //     this.setState({lon: lon});\n        // }\n    }\n    this.getWeather();\n  }\n\n  getWeather() {\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=d0a10211ea3d36b0a6423a104782130e`)\n    .then((response) => {\n        console.log(response.data.weather[0])\n      this.setState({temp: Math.round(response.data.main.temp -273.15)}) \n      this.setState({weather: response.data.weather[0].main})\n      this.setState({locationName: response.data.name})\n    })\n  }\n\n  render() {\n    console.log(\"duff\", this.state);\n    let imgsrc\n    if (this.state.weather === \"Clouds\") {\n        imgsrc = './styles/assets/Clouds.png'\n    }\n    if (this.state.weather === \"Clouds\") {\n        imgsrc = './styles/assets/Clouds.png'\n    }\n    let img\n    img = <img src='./styles/assets/' alt=\"Logo\" />;\n\n    return (\n        <React.Fragment>\n        <Row>\n            <Col xs={6} >\n                <h3>img</h3>\n            </Col>\n            <Col xs={6}>\n                <h3>{this.state.temp} degress</h3>\n            </Col>\n        </Row>\n        <Row>\n            <Col xs={12} >\n                <h3>{this.state.locationName}</h3>\n            </Col>\n        </Row>\n        </React.Fragment>\n    );\n  }\n}\n\nexport default WeatherPreview;"]},"metadata":{},"sourceType":"module"}