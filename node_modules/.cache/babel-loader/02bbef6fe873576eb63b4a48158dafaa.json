{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.typingTimer = null;\n\n    this.taskHandler = event => {\n      let id = event.target.id;\n      let task = event.target.value;\n      const val = event.target.value;\n      clearTimeout(this.typingTimer);\n      this.typingTimer = setTimeout(() => {\n        if (val) {\n          this.putTask(id, task, false);\n        }\n      }, 500);\n    };\n\n    this.completeHandler = event => {\n      let id = event.target.id;\n      let checked = event.target.value;\n      let task;\n      this.state.tasks.map((task, index) => task.id === id ? task = task.task : null);\n\n      if (checked === \"on\") {\n        this.putTask(id, task, true);\n      } else {\n        this.putTask(id, task, false);\n      }\n    };\n\n    this.newTaskHandler = event => {\n      this.setState({\n        newTask: event.target.value\n      });\n      console.log(event.target.value);\n    };\n\n    this.state = {\n      userId: null,\n      getTasks: false,\n      tasks: [],\n      newTask: ''\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`).then(response => {\n      this.setState({\n        userId: response.data.id\n      });\n    });\n  }\n\n  getTasks() {\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId).then(response => {\n      // console.log(response)\n      this.setState({\n        getTasks: true\n      });\n      this.setState({\n        tasks: response.data\n      });\n    });\n  }\n\n  submitHandler() {\n    // console.log(this.state.newTask)\n    if (this.state.newTask) {\n      this.postTask(this.state.newTask);\n    }\n  }\n\n  postTask(task) {\n    axios.post(`http://localhost:8080/api/task`, {\n      task: task,\n      complete: false,\n      user_id: this.state.userId\n    }).then(res => {\n      console.log(res); // this.props.history.push(res.data)\n    });\n  }\n\n  putTask(id, task, complete) {\n    axios.put(`http://localhost:8080/api/task/` + id, {\n      task: task,\n      complete: complete,\n      user_id: this.state.userId\n    }).then(res => {// this.props.history.push(res.data)\n    });\n  }\n\n  render() {\n    console.log(\"state\", this.state.newTask);\n\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n\n    let inputs;\n    let checkboxes;\n\n    if (this.state.tasks !== {}) {\n      inputs = this.state.tasks.map((task, index) => /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        id: task.id,\n        placeholder: task.task,\n        onChange: this.taskHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }\n      }));\n      checkboxes = this.state.tasks.map((task, index) => task.complete === true ? /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: task.id,\n        onChange: this.completeHandler,\n        checked: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }\n      }) : /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: task.id,\n        onChange: this.completeHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, inputs, checkboxes), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, \"New task\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.newTaskHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default TasksEditor;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js"],"names":["React","axios","TasksEditor","Component","constructor","props","typingTimer","taskHandler","event","id","target","task","value","val","clearTimeout","setTimeout","putTask","completeHandler","checked","state","tasks","map","index","newTaskHandler","setState","newTask","console","log","userId","getTasks","componentDidMount","getUserId","get","then","response","data","submitHandler","postTask","post","complete","user_id","res","put","render","inputs","checkboxes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAUnBC,WAVmB,GAUL,IAVK;;AAAA,SAkCnBC,WAlCmB,GAkCJC,KAAD,IAAW;AACvB,UAAIC,EAAE,GAAGD,KAAK,CAACE,MAAN,CAAaD,EAAtB;AACA,UAAIE,IAAI,GAAGH,KAAK,CAACE,MAAN,CAAaE,KAAxB;AACA,YAAMC,GAAG,GAAGL,KAAK,CAACE,MAAN,CAAaE,KAAzB;AACAE,MAAAA,YAAY,CAAC,KAAKR,WAAN,CAAZ;AACA,WAAKA,WAAL,GAAmBS,UAAU,CAAC,MAAM;AACpC,YAAIF,GAAJ,EAAS;AACP,eAAKG,OAAL,CAAaP,EAAb,EAAiBE,IAAjB,EAAuB,KAAvB;AACD;AACA,OAJ4B,EAI1B,GAJ0B,CAA7B;AAKD,KA5CkB;;AAAA,SA8CnBM,eA9CmB,GA8CAT,KAAD,IAAW;AAC3B,UAAIC,EAAE,GAAGD,KAAK,CAACE,MAAN,CAAaD,EAAtB;AACA,UAAIS,OAAO,GAAGV,KAAK,CAACE,MAAN,CAAaE,KAA3B;AACA,UAAID,IAAJ;AACA,WAAKQ,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqB,CAACV,IAAD,EAAOW,KAAP,KACnBX,IAAI,CAACF,EAAL,KAAYA,EAAZ,GACAE,IAAI,GAAGA,IAAI,CAACA,IADZ,GACmB,IAFrB;;AAIA,UAAIO,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAKF,OAAL,CAAaP,EAAb,EAAiBE,IAAjB,EAAuB,IAAvB;AACD,OAFD,MAGK;AACH,aAAKK,OAAL,CAAaP,EAAb,EAAiBE,IAAjB,EAAuB,KAAvB;AACD;AACF,KA5DkB;;AAAA,SA8DnBY,cA9DmB,GA8DDf,KAAD,IAAW;AAC1B,WAAKgB,QAAL,CAAc;AAACC,QAAAA,OAAO,EAAEjB,KAAK,CAACE,MAAN,CAAaE;AAAvB,OAAd;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAK,CAACE,MAAN,CAAaE,KAAzB;AACD,KAjEkB;;AAEjB,SAAKO,KAAL,GAAa;AACTS,MAAAA,MAAM,EAAE,IADC;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTT,MAAAA,KAAK,EAAE,EAHE;AAITK,MAAAA,OAAO,EAAE;AAJA,KAAb;AAMD;;AAIDK,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAAC,KAAKX,KAAL,CAAWS,MAAhB,EAAwB;AACtB,WAAKG,SAAL;AACD;AACF;;AAEDA,EAAAA,SAAS,GAAG;AACV9B,IAAAA,KAAK,CAAC+B,GAAN,CAAW,qCAAX,EACCC,IADD,CACOC,QAAD,IAAc;AAClB,WAAKV,QAAL,CAAc;AAACI,QAAAA,MAAM,EAAEM,QAAQ,CAACC,IAAT,CAAc1B;AAAvB,OAAd;AACD,KAHD;AAID;;AAEDoB,EAAAA,QAAQ,GAAG;AACT5B,IAAAA,KAAK,CAAC+B,GAAN,CAAW,kCAAD,GAAqC,KAAKb,KAAL,CAAWS,MAA1D,EACCK,IADD,CACOC,QAAD,IAAc;AAChB;AACA,WAAKV,QAAL,CAAc;AAACK,QAAAA,QAAQ,EAAE;AAAX,OAAd;AACA,WAAKL,QAAL,CAAc;AAACJ,QAAAA,KAAK,EAAEc,QAAQ,CAACC;AAAjB,OAAd;AACD,KALH;AAMD;;AAmCDC,EAAAA,aAAa,GAAG;AACd;AACA,QAAI,KAAKjB,KAAL,CAAWM,OAAf,EAAwB;AACtB,WAAKY,QAAL,CAAc,KAAKlB,KAAL,CAAWM,OAAzB;AACD;AACF;;AAEDY,EAAAA,QAAQ,CAAC1B,IAAD,EAAO;AACbV,IAAAA,KAAK,CAACqC,IAAN,CAAY,gCAAZ,EAA6C;AAC3C3B,MAAAA,IAAI,EAAEA,IADqC;AAE3C4B,MAAAA,QAAQ,EAAE,KAFiC;AAG3CC,MAAAA,OAAO,EAAE,KAAKrB,KAAL,CAAWS;AAHuB,KAA7C,EAKGK,IALH,CAKQQ,GAAG,IAAI;AACXf,MAAAA,OAAO,CAACC,GAAR,CAAYc,GAAZ,EADW,CAET;AACH,KARH;AASD;;AAEDzB,EAAAA,OAAO,CAACP,EAAD,EAAKE,IAAL,EAAW4B,QAAX,EAAqB;AAC1BtC,IAAAA,KAAK,CAACyC,GAAN,CAAW,iCAAD,GAAoCjC,EAA9C,EAAkD;AAChDE,MAAAA,IAAI,EAAEA,IAD0C;AAEhD4B,MAAAA,QAAQ,EAAEA,QAFsC;AAGhDC,MAAAA,OAAO,EAAE,KAAKrB,KAAL,CAAWS;AAH4B,KAAlD,EAKGK,IALH,CAKQQ,GAAG,IAAI,CACT;AACH,KAPH;AAQD;;AAEDE,EAAAA,MAAM,GAAG;AACPjB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoB,KAAKR,KAAL,CAAWM,OAA/B;;AACA,QAAI,CAAC,KAAKN,KAAL,CAAWU,QAAZ,IAAwB,KAAKV,KAAL,CAAWS,MAAvC,EAA+C;AAC7C,WAAKC,QAAL;AACD;;AACD,QAAIe,MAAJ;AACA,QAAIC,UAAJ;;AACA,QAAI,KAAK1B,KAAL,CAAWC,KAAX,KAAqB,EAAzB,EAA6B;AAC3BwB,MAAAA,MAAM,GAAG,KAAKzB,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqB,CAACV,IAAD,EAAOW,KAAP,kBAC1B;AACA,QAAA,IAAI,EAAC,MADL;AAEA,QAAA,EAAE,EAAGX,IAAI,CAACF,EAFV;AAGA,QAAA,WAAW,EAAIE,IAAI,CAACA,IAHpB;AAIA,QAAA,QAAQ,EAAE,KAAKJ,WAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,CAAT;AAQAsC,MAAAA,UAAU,GAAG,KAAK1B,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqB,CAACV,IAAD,EAAOW,KAAP,KAC9BX,IAAI,CAAC4B,QAAL,KAAkB,IAAlB,gBACA;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,EAAE,EAAE5B,IAAI,CAACF,EAFX;AAGE,QAAA,QAAQ,EAAE,KAAKQ,eAHjB;AAIE,QAAA,OAAO,MAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,gBAOE;AACA,QAAA,IAAI,EAAC,UADL;AAEA,QAAA,EAAE,EAAEN,IAAI,CAACF,EAFT;AAGA,QAAA,QAAQ,EAAE,KAAKQ,eAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARO,CAAb;AAcD;;AAED,wBACA,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG2B,MADH,EAEGC,UAFH,CADF,eAME;AAAM,MAAA,QAAQ,EAAE,KAAKT,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEE;AACA,MAAA,IAAI,EAAC,MADL;AAEA,MAAA,QAAQ,EAAE,KAAKb,cAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AACA,MAAA,IAAI,EAAC,QADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CANF,CADA;AAmBD;;AArJuC;;AAwJ1C,eAAerB,WAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        userId: null,\n        getTasks: false,\n        tasks: [],\n        newTask: ''\n    };\n  }\n\n  typingTimer = null;\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`)\n    .then((response) => {\n      this.setState({userId: response.data.id})\n    })\n  }\n\n  getTasks() {\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId)\n    .then((response) => {\n        // console.log(response)\n        this.setState({getTasks: true})\n        this.setState({tasks: response.data})\n      })\n  }\n\n  taskHandler = (event) => {\n    let id = event.target.id\n    let task = event.target.value\n    const val = event.target.value;\n    clearTimeout(this.typingTimer);\n    this.typingTimer = setTimeout(() => {\n    if (val) {\n      this.putTask(id, task, false)\n    }\n    }, 500);\n  }\n\n  completeHandler = (event) => {\n    let id = event.target.id\n    let checked = event.target.value\n    let task\n    this.state.tasks.map((task, index) => \n      task.id === id ?\n      task = task.task : null\n    );\n    if (checked === \"on\") {\n      this.putTask(id, task, true)\n    }\n    else {\n      this.putTask(id, task, false)\n    }\n  }\n\n  newTaskHandler = (event) => {\n    this.setState({newTask: event.target.value});\n    console.log(event.target.value)\n  }\n\n  submitHandler() {\n    // console.log(this.state.newTask)\n    if (this.state.newTask) {\n      this.postTask(this.state.newTask)\n    }\n  }\n\n  postTask(task) {\n    axios.post(`http://localhost:8080/api/task`, {\n      task: task,\n      complete: false,\n      user_id: this.state.userId\n      })\n      .then(res => {\n        console.log(res)\n          // this.props.history.push(res.data)\n      })\n  }\n\n  putTask(id, task, complete) {\n    axios.put(`http://localhost:8080/api/task/` + id, {\n      task: task,\n      complete: complete,\n      user_id: this.state.userId\n      })\n      .then(res => {\n          // this.props.history.push(res.data)\n      })\n  }\n\n  render() {\n    console.log(\"state\",this.state.newTask)\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n    let inputs\n    let checkboxes\n    if (this.state.tasks !== {}) {\n      inputs = this.state.tasks.map((task, index) => \n          <input\n          type='text'\n          id= {task.id}\n          placeholder = {task.task}\n          onChange={this.taskHandler}\n          />\n        );\n      checkboxes = this.state.tasks.map((task, index) =>\n          task.complete === true ?\n          <input \n            type=\"checkbox\" \n            id={task.id}\n            onChange={this.completeHandler}\n            checked\n            /> :\n            <input \n            type=\"checkbox\" \n            id={task.id}\n            onChange={this.completeHandler}\n            />\n        );\n    }\n\n    return (\n    <React.Fragment>\n      <form>\n        {inputs}\n        {checkboxes}\n      </form>\n\n      <form onSubmit={this.submitHandler}>\n      <p>New task</p>\n        <input\n        type='text'\n        onChange={this.newTaskHandler}\n        />\n        <input\n        type='submit'\n        />\n      </form>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default TasksEditor ;"]},"metadata":{},"sourceType":"module"}