{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.typingTimer = null;\n\n    this.taskHandler = event => {\n      const newList = this.state.taskList.slice();\n      newList[event.target.id] = event.target.value;\n      this.setState({\n        taskList: newList\n      });\n      const val = event.target.value;\n      clearTimeout(this.typingTimer);\n      this.typingTimer = setTimeout(() => {\n        if (val) {\n          this.submitUpdates(); // window.alert('Stopped typing !');\n        }\n      }, 5000);\n    };\n\n    this.completeHandler = event => {\n      const newList = this.state.completeList.slice();\n\n      if (event.target.value === \"on\") {\n        newList[event.target.id] = true;\n      } else {\n        newList[event.target.id] = false;\n      }\n\n      this.setState({\n        completeList: newList\n      });\n    };\n\n    this.state = {\n      taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\", \"Task 7\"],\n      completeList: [false, false, false, false, false, false],\n      userId: null,\n      getTasks: false,\n      tasks: {}\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`).then(response => {\n      this.setState({\n        userId: response.data.id\n      });\n    });\n  }\n\n  getTasks() {\n    const newTaskList = this.state.taskList.slice();\n    const newCompList = this.state.completeList.slice();\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId).then(response => {\n      response.data.map((task, i) => newTaskList[i] = task.task);\n      response.data.map((task, i) => newCompList[i] = task.complete);\n      console.log(response);\n      this.setState({\n        taskList: newTaskList\n      });\n      this.setState({\n        completeList: newCompList\n      });\n      this.setState({\n        getTasks: true\n      });\n      this.setState({\n        tasks: response.data\n      });\n    });\n  }\n\n  submitUpdates() {\n    this.state.taskList.map(task => // !task.startsWith(\"Task \") ? this.postTask(task) : null\n    this.postTask(task));\n  }\n\n  postTask(task) {\n    axios.post(`http://localhost:8080/api/task`, {\n      task: task,\n      complete: false,\n      user_id: this.state.userId\n    }).then(res => {// this.props.history.push(res.data)\n    });\n  } // submitHandler = (event) => {\n  //   event.preventDefault();\n  //   if (this.state.task !== \"\") {\n  //       axios.post(`http://localhost:8080/api/tasks`, {\n  //           task: this.state.task,\n  //           complete: this.state.complete\n  //       })\n  //       .then(res => {\n  //           // this.props.history.push(res.data)\n  //       })\n  //   }\n  // }\n\n\n  render() {\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n\n    let inputs;\n    let checkboxes;\n    console.log(this.state.tasks);\n\n    if (this.state.tasks !== {}) {\n      Object.keys(this.state.tasks).map(function (key, index) {\n        console.log(this.state.tasks[key]);\n      });\n    } // inputs = this.state.taskList.map((task, index) => (\n    //   <input\n    //     type='text'\n    //     id= {index}\n    //     value = {task.task}\n    //     onChange={this.taskHandler}\n    //     />\n    // ));\n    // checkboxes = this.state.completeList.map((checkbox, index) => (\n    //     checkbox.complete == true ?\n    //     <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       checked\n    //       /> :\n    //       <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       />\n    // ));\n\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, inputs, checkboxes));\n  }\n\n}\n\nexport default TasksEditor;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js"],"names":["React","axios","TasksEditor","Component","constructor","props","typingTimer","taskHandler","event","newList","state","taskList","slice","target","id","value","setState","val","clearTimeout","setTimeout","submitUpdates","completeHandler","completeList","userId","getTasks","tasks","componentDidMount","getUserId","get","then","response","data","newTaskList","newCompList","map","task","i","complete","console","log","postTask","post","user_id","res","render","inputs","checkboxes","Object","keys","key","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\", \"Task 7\"],\n        completeList: [false, false,false,false,false,false],\n        userId: null,\n        getTasks: false,\n        tasks: {}\n    };\n  }\n\n  typingTimer = null;\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`)\n    .then((response) => {\n      this.setState({userId: response.data.id})\n    })\n  }\n\n  getTasks() {\n    const newTaskList = this.state.taskList.slice()\n    const newCompList = this.state.completeList.slice()\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId)\n    .then((response) => {\n        response.data.map((task,i) => \n          newTaskList[i] = task.task\n        );\n        response.data.map((task,i) => \n          newCompList[i] = task.complete,\n      );\n      console.log(response)\n        this.setState({taskList: newTaskList})\n        this.setState({completeList: newCompList})\n        this.setState({getTasks: true})\n        this.setState({tasks: response.data})\n      })\n  }\n\n  taskHandler = (event) => {\n    const newList = this.state.taskList.slice()\n    newList[event.target.id] = event.target.value\n    this.setState({taskList: newList})\n    const val = event.target.value;\n       clearTimeout(this.typingTimer);\n       this.typingTimer = setTimeout(() => {\n        if (val) {\n          this.submitUpdates()\n          // window.alert('Stopped typing !');\n        }\n       }, 5000);\n  }\n\n  completeHandler = (event) => {\n    const newList = this.state.completeList.slice()\n    if (event.target.value === \"on\") {\n      newList[event.target.id] = true\n    }\n    else {\n      newList[event.target.id] = false\n    }\n    this.setState({completeList: newList})\n  }\n\n  submitUpdates() {\n    this.state.taskList.map((task) => \n        // !task.startsWith(\"Task \") ? this.postTask(task) : null\n        this.postTask(task)\n      );\n  }\n\n  postTask(task) {\n    axios.post(`http://localhost:8080/api/task`, {\n      task: task,\n      complete: false,\n      user_id: this.state.userId\n      })\n      .then(res => {\n          // this.props.history.push(res.data)\n      })\n  }\n\n  // submitHandler = (event) => {\n  //   event.preventDefault();\n  //   if (this.state.task !== \"\") {\n  //       axios.post(`http://localhost:8080/api/tasks`, {\n  //           task: this.state.task,\n  //           complete: this.state.complete\n  //       })\n  //       .then(res => {\n  //           // this.props.history.push(res.data)\n  //       })\n  //   }\n  // }\n\n  render() {\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n    let inputs\n    let checkboxes\n    console.log(this.state.tasks)\n    if (this.state.tasks !== {}) {\n        Object.keys(this.state.tasks).map(function(key, index) {\n          console.log(this.state.tasks[key])\n        });\n    }\n    // inputs = this.state.taskList.map((task, index) => (\n    //   <input\n    //     type='text'\n    //     id= {index}\n    //     value = {task.task}\n    //     onChange={this.taskHandler}\n    //     />\n    // ));\n    // checkboxes = this.state.completeList.map((checkbox, index) => (\n    //     checkbox.complete == true ?\n    //     <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       checked\n    //       /> :\n    //       <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       />\n  // ));\n    return (\n    <React.Fragment>\n      <form>\n        {inputs}\n        {checkboxes}\n      </form>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default TasksEditor ;"]},"metadata":{},"sourceType":"module"}