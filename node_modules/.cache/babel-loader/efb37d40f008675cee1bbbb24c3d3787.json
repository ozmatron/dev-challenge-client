{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.taskHandler = event => {\n      const newList = this.state.taskList.slice();\n      newList[event.target.id] = event.target.value;\n      this.setState({\n        taskList: newList\n      });\n    };\n\n    this.completeHandler = event => {\n      const newList = this.state.completeList.slice();\n\n      if (event.target.value === \"on\") {\n        newList[event.target.id] = true;\n      } else {\n        newList[event.target.id] = false;\n      }\n\n      this.setState({\n        completeList: newList\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n\n      if (this.state.task !== \"\") {\n        axios.post(`http://localhost:8080/api/tasks`, {\n          task: this.state.task,\n          complete: this.state.complete\n        }).then(res => {// this.props.history.push(res.data)\n        });\n      }\n    };\n\n    this.state = {\n      taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\"],\n      completeList: [false, false, false, false, false, false],\n      task: '',\n      complete: false,\n      userId: null\n    };\n  }\n\n  componentDidMount() {\n    this.getTasks();\n  }\n\n  getTasks() {\n    axios.get(`http://localhost:8080/api/user_data`).then(response => {\n      console.log(response.data);\n\n      if (response.ok) {\n        this.setState({\n          userId: response.data.id\n        });\n      }\n    });\n\n    if (this.state.userId) {\n      axios.get(`ttp://localhost:8080/api/tasks/` + this.state.userId).then(response => {\n        if (response.ok) {\n          console.log(response.data); // this.setState({userId: response.data.id})\n        }\n      });\n    }\n  } // http://localhost:8080/api/tasks/10\n\n\n  render() {\n    console.log(this.state.userId);\n    let inputs = this.state.taskList.map((task, index) => /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: index,\n      placeholder: task // value=\"Submit\"\n      ,\n      onChange: this.taskHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }));\n    let checkboxes = this.state.taskList.map((checkbox, index) => /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: index,\n      onChange: this.completeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, inputs, checkboxes));\n  }\n\n}\n\nexport default TasksEditor;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js"],"names":["React","axios","TasksEditor","Component","constructor","props","taskHandler","event","newList","state","taskList","slice","target","id","value","setState","completeHandler","completeList","submitHandler","preventDefault","task","post","complete","then","res","userId","componentDidMount","getTasks","get","response","console","log","data","ok","render","inputs","map","index","checkboxes","checkbox"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\"],\n        completeList: [false, false,false,false,false,false,],\n        task: '',\n        complete: false,\n        userId: null\n    };\n  }\n\n  componentDidMount() {\n    this.getTasks();\n  }\n\n  getTasks() {\n    axios.get(`http://localhost:8080/api/user_data`)\n    .then((response) => {\n      console.log(response.data)\n      if (response.ok) {\n        this.setState({userId: response.data.id})\n      }\n    })\n    if (this.state.userId) {\n      axios.get(`ttp://localhost:8080/api/tasks/` + this.state.userId)\n      .then((response) => {\n        if (response.ok) {\n          console.log(response.data)\n          // this.setState({userId: response.data.id})\n        }\n      })\n    }\n  }\n\n  // http://localhost:8080/api/tasks/10\n\n  taskHandler = (event) => {\n    const newList = this.state.taskList.slice()\n    newList[event.target.id] = event.target.value\n    this.setState({taskList: newList})\n  }\n\n  completeHandler = (event) => {\n    const newList = this.state.completeList.slice()\n    if (event.target.value === \"on\") {\n      newList[event.target.id] = true\n    }\n    else {\n      newList[event.target.id] = false\n    }\n    this.setState({completeList: newList})\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    if (this.state.task !== \"\") {\n        axios.post(`http://localhost:8080/api/tasks`, {\n            task: this.state.task,\n            complete: this.state.complete\n        })\n        .then(res => {\n            // this.props.history.push(res.data)\n        })\n    }\n  }\n\n  render() {\n    console.log(this.state.userId)\n\n    let inputs = this.state.taskList.map((task, index) => (\n      <input\n        type='text'\n        id= {index}\n        placeholder = {task}\n        // value=\"Submit\"\n        onChange={this.taskHandler}\n        />\n    ));\n    let checkboxes = this.state.taskList.map((checkbox, index) => (\n        <input \n          type=\"checkbox\" \n          id={index}\n          onChange={this.completeHandler}\n          />\n  ));\n    return (\n    <React.Fragment>\n      <form onSubmit={this.submitHandler}>\n        {inputs}\n        {checkboxes}\n      </form>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default TasksEditor ;"]},"metadata":{},"sourceType":"module"}