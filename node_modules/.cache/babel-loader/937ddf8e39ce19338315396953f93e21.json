{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/weather.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: 51.4939446,\n      lon: -0.0841836\n    };\n  }\n\n  componentDidMount() {\n    var lat = 0;\n\n    if (\"geolocation\" in navigator) {\n      // navigator.geolocation.getCurrentPosition(function(position) {\n      //     console.log(\"yurt\",position.coords.latitude, position.coords.longitude)\n      //     if (position.coords.latitude && position.coords.longitude) {\n      //         this.setState({lat: position.coords.latitude});\n      //         this.setState({lon: position.coords.longitude});\n      //     }\n      //   });\n      navigator.geolocation.getCurrentPosition(function (position) {\n        if (position.coords.latitude && position.coords.longitude) {\n          // this.setState({lat: position.coords.latitude});\n          // this.setState({lon: position.coords.longitude});\n          lat = position.coords.latitude;\n          console.log(\"Lat is :\", typeof position.coords.latitude);\n          console.log(\"Lon is :\", typeof position.coords.longitude);\n        }\n      });\n    }\n\n    if (lat !== 0) {\n      this.setState({\n        lat: lat\n      });\n    }\n  }\n\n  render() {\n    // console.log(\"Latitude is :\", this.state.lat);\n    // console.log(\"Longitude is :\", this.state.lon);\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, this.state.name);\n  }\n\n}\n\nexport default WeatherPreview;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/weather.js"],"names":["React","axios","WeatherPreview","Component","constructor","props","state","lat","lon","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","setState","render","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE,UADI;AAETC,MAAAA,GAAG,EAAE,CAAC;AAFG,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIF,GAAG,GAAG,CAAV;;AACA,QAAI,iBAAiBG,SAArB,EAAgC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAASC,QAAT,EAAmB;AAExD,YAAIA,QAAQ,CAACC,MAAT,CAAgBC,QAAhB,IAA4BF,QAAQ,CAACC,MAAT,CAAgBE,SAAhD,EAA2D;AACvD;AACA;AACAT,UAAAA,GAAG,GAAGM,QAAQ,CAACC,MAAT,CAAgBC,QAAtB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,OAAOL,QAAQ,CAACC,MAAT,CAAgBC,QAA/C;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,OAAOL,QAAQ,CAACC,MAAT,CAAgBE,SAA/C;AACH;AACF,OATH;AAUH;;AACD,QAAIT,GAAG,KAAK,CAAZ,EAAe;AACX,WAAKY,QAAL,CAAc;AAACZ,QAAAA,GAAG,EAAEA;AAAN,OAAd;AACH;AACF;;AAEDa,EAAAA,MAAM,GAAG;AACP;AACA;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKd,KAAL,CAAWe,IAAhB,CADF;AAGD;;AA1C0C;;AA6C7C,eAAenB,cAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        lat: 51.4939446,\n        lon: -0.0841836\n    };\n  }\n\n  componentDidMount() {\n    var lat = 0\n    if (\"geolocation\" in navigator) {\n        // navigator.geolocation.getCurrentPosition(function(position) {\n        //     console.log(\"yurt\",position.coords.latitude, position.coords.longitude)\n        //     if (position.coords.latitude && position.coords.longitude) {\n        //         this.setState({lat: position.coords.latitude});\n        //         this.setState({lon: position.coords.longitude});\n        //     }\n        //   });\n\n        navigator.geolocation.getCurrentPosition(function(position) {\n            \n            if (position.coords.latitude && position.coords.longitude) {\n                // this.setState({lat: position.coords.latitude});\n                // this.setState({lon: position.coords.longitude});\n                lat = position.coords.latitude;\n                console.log(\"Lat is :\", typeof position.coords.latitude);\n                console.log(\"Lon is :\", typeof position.coords.longitude);\n            }\n          });\n    }\n    if (lat !== 0) {\n        this.setState({lat: lat}) \n    }\n  }\n\n  render() {\n    // console.log(\"Latitude is :\", this.state.lat);\n    // console.log(\"Longitude is :\", this.state.lon);\n    return (\n      <h1>{this.state.name}</h1>\n    );\n  }\n}\n\nexport default WeatherPreview;"]},"metadata":{},"sourceType":"module"}