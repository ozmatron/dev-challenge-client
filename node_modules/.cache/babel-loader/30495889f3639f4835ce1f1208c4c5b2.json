{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/weather.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: 51.4939446,\n      lon: -0.0841836,\n      temp: null,\n      weather: null,\n      locationName: null\n    };\n  }\n\n  componentDidMount() {\n    var lat = null;\n    var lon = null;\n\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        if (position.coords.latitude && position.coords.longitude) {\n          // console.log(\"Latitude is :\", position.coords.latitude);\n          // console.log(\"Longitude is :\", position.coords.longitude);\n          lat = position.coords.latitude;\n          lon = position.coords.longitude;\n        }\n      }); // if (lat && lon) {\n      //     this.setState({lat: lat}) \n      //     this.setState({lon: lon});\n      // }\n    }\n\n    this.getWeather();\n  }\n\n  getWeather() {\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=d0a10211ea3d36b0a6423a104782130e`).then(response => {\n      this.setState({\n        temp: Math.round(response.data.main.temp - 273.15)\n      });\n      this.setState({\n        weather: response.data.weather[0].main\n      });\n      this.setState({\n        locationName: response.data.name\n      });\n    });\n  }\n\n  render() {\n    console.log(\"duff\", this.state);\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, this.state.locationName);\n  }\n\n}\n\nexport default WeatherPreview;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/weather.js"],"names":["React","axios","WeatherPreview","Component","constructor","props","state","lat","lon","temp","weather","locationName","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getWeather","get","then","response","setState","Math","round","data","main","name","render","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE,UADI;AAETC,MAAAA,GAAG,EAAE,CAAC,SAFG;AAGTC,MAAAA,IAAI,EAAE,IAHG;AAITC,MAAAA,OAAO,EAAE,IAJA;AAKTC,MAAAA,YAAY,EAAE;AALL,KAAb;AAOD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIL,GAAG,GAAG,IAAV;AACA,QAAIC,GAAG,GAAG,IAAV;;AACA,QAAI,iBAAiBK,SAArB,EAAgC;AAC5BA,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAASC,QAAT,EAAmB;AACxD,YAAIA,QAAQ,CAACC,MAAT,CAAgBC,QAAhB,IAA4BF,QAAQ,CAACC,MAAT,CAAgBE,SAAhD,EAA2D;AACvD;AACA;AACAZ,UAAAA,GAAG,GAAGS,QAAQ,CAACC,MAAT,CAAgBC,QAAtB;AACAV,UAAAA,GAAG,GAAGQ,QAAQ,CAACC,MAAT,CAAgBE,SAAtB;AACH;AACF,OAPH,EAD4B,CAS5B;AACA;AACA;AACA;AACH;;AACD,SAAKC,UAAL;AACD;;AAEDA,EAAAA,UAAU,GAAG;AACXnB,IAAAA,KAAK,CAACoB,GAAN,CAAW,uDAAsD,KAAKf,KAAL,CAAWC,GAAI,QAAO,KAAKD,KAAL,CAAWE,GAAI,yCAAtG,EACCc,IADD,CACOC,QAAD,IAAc;AAClB,WAAKC,QAAL,CAAc;AAACf,QAAAA,IAAI,EAAEgB,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,IAAT,CAAcC,IAAd,CAAmBnB,IAAnB,GAAyB,MAApC;AAAP,OAAd;AACA,WAAKe,QAAL,CAAc;AAACd,QAAAA,OAAO,EAAEa,QAAQ,CAACI,IAAT,CAAcjB,OAAd,CAAsB,CAAtB,EAAyBkB;AAAnC,OAAd;AACA,WAAKJ,QAAL,CAAc;AAACb,QAAAA,YAAY,EAAEY,QAAQ,CAACI,IAAT,CAAcE;AAA7B,OAAd;AACD,KALD;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAK1B,KAAzB;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKA,KAAL,CAAWK,YAAhB,CADF;AAGD;;AA9C0C;;AAiD7C,eAAeT,cAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        lat: 51.4939446,\n        lon: -0.0841836,\n        temp: null,\n        weather: null,\n        locationName: null\n    };\n  }\n\n  componentDidMount() {\n    var lat = null\n    var lon = null\n    if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition(function(position) {       \n            if (position.coords.latitude && position.coords.longitude) {\n                // console.log(\"Latitude is :\", position.coords.latitude);\n                // console.log(\"Longitude is :\", position.coords.longitude);\n                lat = position.coords.latitude;\n                lon = position.coords.longitude\n            }\n          });\n        // if (lat && lon) {\n        //     this.setState({lat: lat}) \n        //     this.setState({lon: lon});\n        // }\n    }\n    this.getWeather();\n  }\n\n  getWeather() {\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=d0a10211ea3d36b0a6423a104782130e`)\n    .then((response) => {\n      this.setState({temp: Math.round(response.data.main.temp -273.15)}) \n      this.setState({weather: response.data.weather[0].main})\n      this.setState({locationName: response.data.name})\n    })\n  }\n\n  render() {\n    console.log(\"duff\", this.state);\n    return (\n      <h1>{this.state.locationName}</h1>\n    );\n  }\n}\n\nexport default WeatherPreview;"]},"metadata":{},"sourceType":"module"}