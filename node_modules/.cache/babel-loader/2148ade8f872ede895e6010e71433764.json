{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.typingTimer = null;\n\n    this.taskHandler = event => {\n      console.log(event.target.value);\n      const newList = this.state.taskList.slice();\n      newList[event.target.id] = event.target.value;\n      this.setState({\n        taskList: newList\n      });\n      const val = event.target.value;\n      clearTimeout(this.typingTimer);\n      this.typingTimer = setTimeout(() => {\n        if (val) {\n          this.setState(prevState => {\n            let tasks = Object.assign({}, prevState.tasks); // creating copy of state variable jasper\n\n            tasks.task = event.target.value; // update the name property, assign a new value                 \n\n            return {\n              tasks\n            }; // return new object jasper object\n          }); // this.submitUpdates()\n          // window.alert('Stopped typing !');\n        }\n      }, 500);\n    };\n\n    this.completeHandler = event => {\n      const newList = this.state.completeList.slice();\n\n      if (event.target.value === \"on\") {\n        newList[event.target.id] = true;\n      } else {\n        newList[event.target.id] = false;\n      }\n\n      this.setState({\n        completeList: newList\n      });\n    };\n\n    this.state = {\n      taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\", \"Task 7\"],\n      completeList: [false, false, false, false, false, false],\n      userId: null,\n      getTasks: false,\n      tasks: []\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`).then(response => {\n      this.setState({\n        userId: response.data.id\n      });\n    });\n  }\n\n  getTasks() {\n    const newTaskList = this.state.taskList.slice();\n    const newCompList = this.state.completeList.slice();\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId).then(response => {\n      response.data.map((task, i) => newTaskList[i] = task.task);\n      response.data.map((task, i) => newCompList[i] = task.complete);\n      console.log(response);\n      this.setState({\n        taskList: newTaskList\n      });\n      this.setState({\n        completeList: newCompList\n      });\n      this.setState({\n        getTasks: true\n      });\n      this.setState({\n        tasks: response.data\n      });\n    });\n  }\n\n  submitUpdates() {// this.state.taskList.map((task) => \n    //     // !task.startsWith(\"Task \") ? this.postTask(task) : null\n    //     this.postTask(task)\n    //   );\n  }\n\n  postTask(task) {\n    axios.post(`http://localhost:8080/api/task`, {\n      task: task,\n      complete: false,\n      user_id: this.state.userId\n    }).then(res => {// this.props.history.push(res.data)\n    });\n  }\n\n  render() {\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n\n    let inputs;\n    let checkboxes; // console.log(\"tasks\",this.state.tasks)\n\n    if (this.state.tasks !== {}) {\n      inputs = this.state.tasks.map((task, index) => /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        id: task.id,\n        placeholder: task.task,\n        onChange: this.taskHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }));\n      checkboxes = this.state.tasks.map((task, index) => task.complete == true ? /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: task.id,\n        onChange: this.completeHandler,\n        checked: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }\n      }) : /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: index,\n        onChange: this.completeHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      }));\n    } // inputs = this.state.taskList.map((task, index) => (\n    //   <input\n    //     type='text'\n    //     id= {index}\n    //     value = {task.task}\n    //     onChange={this.taskHandler}\n    //     />\n    // ));\n    // checkboxes = this.state.completeList.map((checkbox, index) => (\n    //     checkbox.complete == true ?\n    //     <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       checked\n    //       /> :\n    //       <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       />\n    // ));\n\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }\n    }, inputs, checkboxes));\n  }\n\n}\n\nexport default TasksEditor;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js"],"names":["React","axios","TasksEditor","Component","constructor","props","typingTimer","taskHandler","event","console","log","target","value","newList","state","taskList","slice","id","setState","val","clearTimeout","setTimeout","prevState","tasks","Object","assign","task","completeHandler","completeList","userId","getTasks","componentDidMount","getUserId","get","then","response","data","newTaskList","newCompList","map","i","complete","submitUpdates","postTask","post","user_id","res","render","inputs","checkboxes","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\", \"Task 7\"],\n        completeList: [false, false,false,false,false,false],\n        userId: null,\n        getTasks: false,\n        tasks: []\n    };\n  }\n\n  typingTimer = null;\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`)\n    .then((response) => {\n      this.setState({userId: response.data.id})\n    })\n  }\n\n  getTasks() {\n    const newTaskList = this.state.taskList.slice()\n    const newCompList = this.state.completeList.slice()\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId)\n    .then((response) => {\n        response.data.map((task,i) => \n          newTaskList[i] = task.task\n        );\n        response.data.map((task,i) => \n          newCompList[i] = task.complete,\n      );\n      console.log(response)\n        this.setState({taskList: newTaskList})\n        this.setState({completeList: newCompList})\n        this.setState({getTasks: true})\n        this.setState({tasks: response.data})\n      })\n  }\n\n  taskHandler = (event) => {\n    console.log(event.target.value)\n\n    const newList = this.state.taskList.slice()\n    newList[event.target.id] = event.target.value\n    this.setState({taskList: newList})\n    const val = event.target.value;\n       clearTimeout(this.typingTimer);\n       this.typingTimer = setTimeout(() => {\n        if (val) {\n          this.setState(prevState => {\n            let tasks = Object.assign({}, prevState.tasks);  // creating copy of state variable jasper\n            tasks.task = event.target.value;                     // update the name property, assign a new value                 \n            return { tasks };                                 // return new object jasper object\n          })\n          // this.submitUpdates()\n          // window.alert('Stopped typing !');\n        }\n       }, 500);\n  }\n\n  completeHandler = (event) => {\n    const newList = this.state.completeList.slice()\n    if (event.target.value === \"on\") {\n      newList[event.target.id] = true\n    }\n    else {\n      newList[event.target.id] = false\n    }\n    this.setState({completeList: newList})\n  }\n\n  submitUpdates() {\n    // this.state.taskList.map((task) => \n    //     // !task.startsWith(\"Task \") ? this.postTask(task) : null\n    //     this.postTask(task)\n    //   );\n  }\n\n  postTask(task) {\n    axios.post(`http://localhost:8080/api/task`, {\n      task: task,\n      complete: false,\n      user_id: this.state.userId\n      })\n      .then(res => {\n          // this.props.history.push(res.data)\n      })\n  }\n\n  render() {\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n    let inputs\n    let checkboxes\n    // console.log(\"tasks\",this.state.tasks)\n    if (this.state.tasks !== {}) {\n      inputs = this.state.tasks.map((task, index) => \n          <input\n          type='text'\n          id= {task.id}\n          placeholder = {task.task}\n          onChange={this.taskHandler}\n          />\n        );\n        checkboxes = this.state.tasks.map((task, index) =>\n              task.complete == true ?\n              <input \n                type=\"checkbox\" \n                id={task.id}\n                onChange={this.completeHandler}\n                checked\n                /> :\n                <input \n                type=\"checkbox\" \n                id={index}\n                onChange={this.completeHandler}\n                />\n        );\n    }\n    // inputs = this.state.taskList.map((task, index) => (\n    //   <input\n    //     type='text'\n    //     id= {index}\n    //     value = {task.task}\n    //     onChange={this.taskHandler}\n    //     />\n    // ));\n    // checkboxes = this.state.completeList.map((checkbox, index) => (\n    //     checkbox.complete == true ?\n    //     <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       checked\n    //       /> :\n    //       <input \n    //       type=\"checkbox\" \n    //       id={index}\n    //       onChange={this.completeHandler}\n    //       />\n  // ));\n    return (\n    <React.Fragment>\n      <form>\n        {inputs}\n        {checkboxes}\n      </form>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default TasksEditor ;"]},"metadata":{},"sourceType":"module"}