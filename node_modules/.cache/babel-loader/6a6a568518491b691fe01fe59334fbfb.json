{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.typingTimer = null;\n\n    this.taskHandler = event => {\n      const newList = this.state.taskList.slice();\n      newList[event.target.id] = event.target.value;\n      this.setState({\n        taskList: newList\n      });\n      const val = event.target.value;\n      clearTimeout(this.typingTimer);\n      this.typingTimer = setTimeout(() => {\n        if (val) {\n          window.alert('Stopped typing !');\n        }\n      }, 1000);\n    };\n\n    this.completeHandler = event => {\n      const newList = this.state.completeList.slice();\n\n      if (event.target.value === \"on\") {\n        newList[event.target.id] = true;\n      } else {\n        newList[event.target.id] = false;\n      }\n\n      this.setState({\n        completeList: newList\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n\n      if (this.state.task !== \"\") {\n        axios.post(`http://localhost:8080/api/tasks`, {\n          task: this.state.task,\n          complete: this.state.complete\n        }).then(res => {// this.props.history.push(res.data)\n        });\n      }\n    };\n\n    this.state = {\n      taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\"],\n      completeList: [false, false, false, false, false, false],\n      userId: null,\n      getTasks: false\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`).then(response => {\n      this.setState({\n        userId: response.data.id\n      });\n    });\n  }\n\n  getTasks() {\n    const newTaskList = this.state.taskList.slice();\n    const newCompList = this.state.completeList.slice();\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId).then(response => {\n      response.data.map((task, i) => newTaskList[i] = task.task);\n      response.data.map((task, i) => newCompList[i] = task.complete);\n      console.log(response);\n      this.setState({\n        taskList: newTaskList\n      });\n      this.setState({\n        completeList: newCompList\n      });\n      this.setState({\n        getTasks: true\n      });\n    });\n  }\n\n  render() {\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n\n    console.log(this.state);\n    let inputs = this.state.taskList.map((task, index) => /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: index,\n      value: task,\n      onChange: this.taskHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }));\n    let checkboxes = this.state.taskList.map((checkbox, index) => /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: index,\n      onChange: this.completeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, inputs, checkboxes));\n  }\n\n}\n\nexport default TasksEditor;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/tasks-edit.js"],"names":["React","axios","TasksEditor","Component","constructor","props","typingTimer","taskHandler","event","newList","state","taskList","slice","target","id","value","setState","val","clearTimeout","setTimeout","window","alert","completeHandler","completeList","submitHandler","preventDefault","task","post","complete","then","res","userId","getTasks","componentDidMount","getUserId","get","response","data","newTaskList","newCompList","map","i","console","log","render","inputs","index","checkboxes","checkbox"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass TasksEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        taskList: [\"Task 1\", \"Task 2\", \"Task 3\", \"Task 4\", \"Task 5\", \"Task 6\"],\n        completeList: [false, false,false,false,false,false,],\n        userId: null,\n        getTasks: false\n    };\n  }\n\n  typingTimer = null;\n\n  componentDidMount() {\n    if (!this.state.userId) {\n      this.getUserId();\n    }\n  }\n\n  getUserId() {\n    axios.get(`http://localhost:8080/api/user_data`)\n    .then((response) => {\n      this.setState({userId: response.data.id})\n    })\n  }\n\n  getTasks() {\n    const newTaskList = this.state.taskList.slice()\n    const newCompList = this.state.completeList.slice()\n    axios.get(`http://localhost:8080/api/tasks/` + this.state.userId)\n    .then((response) => {\n        response.data.map((task,i) => \n          newTaskList[i] = task.task\n        );\n        response.data.map((task,i) => \n          newCompList[i] = task.complete,\n      );\n      console.log(response)\n        this.setState({taskList: newTaskList})\n        this.setState({completeList: newCompList})\n        this.setState({getTasks: true})\n      })\n  }\n\n  taskHandler = (event) => {\n    const newList = this.state.taskList.slice()\n    newList[event.target.id] = event.target.value\n    this.setState({taskList: newList})\n    const val = event.target.value;\n       clearTimeout(this.typingTimer);\n       this.typingTimer = setTimeout(() => {\n        if (val) {\n          window.alert('Stopped typing !');\n        }\n       }, 1000);\n  }\n\n  completeHandler = (event) => {\n    const newList = this.state.completeList.slice()\n    if (event.target.value === \"on\") {\n      newList[event.target.id] = true\n    }\n    else {\n      newList[event.target.id] = false\n    }\n    this.setState({completeList: newList})\n  }\n\n  submitHandler = (event) => {\n    event.preventDefault();\n    if (this.state.task !== \"\") {\n        axios.post(`http://localhost:8080/api/tasks`, {\n            task: this.state.task,\n            complete: this.state.complete\n        })\n        .then(res => {\n            // this.props.history.push(res.data)\n        })\n    }\n  }\n\n  render() {\n    if (!this.state.getTasks && this.state.userId) {\n      this.getTasks();\n    }\n    console.log(this.state)\n\n    let inputs = this.state.taskList.map((task, index) => (\n      <input\n        type='text'\n        id= {index}\n        value = {task}\n        onChange={this.taskHandler}\n        />\n    ));\n    let checkboxes = this.state.taskList.map((checkbox, index) => (\n        <input \n          type=\"checkbox\" \n          id={index}\n          onChange={this.completeHandler}\n          />\n  ));\n    return (\n    <React.Fragment>\n      <form onSubmit={this.submitHandler}>\n        {inputs}\n        {checkboxes}\n      </form>\n    </React.Fragment>\n    );\n  }\n}\n\nexport default TasksEditor ;"]},"metadata":{},"sourceType":"module"}