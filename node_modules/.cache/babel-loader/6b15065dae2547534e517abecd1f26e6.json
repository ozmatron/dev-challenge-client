{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy-client/src/components/weather.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport clouds from './Clouds.png';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: null,\n      lon: null,\n      temp: null,\n      weather: null,\n      locationName: null\n    };\n  }\n\n  componentDidMount() {\n    var lat = null;\n    var lon = null;\n\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        if (position.coords.latitude && position.coords.longitude) {\n          lat = position.coords.latitude;\n          lon = position.coords.longitude;\n          this.setState({\n            lat: lat\n          });\n          this.setState({\n            lon: lon\n          });\n        }\n      });\n    }\n  }\n\n  getWeather() {\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=d0a10211ea3d36b0a6423a104782130e`).then(response => {\n      this.setState({\n        temp: Math.round(response.data.main.temp - 273.15)\n      });\n      this.setState({\n        weather: response.data.weather[0].main\n      });\n      this.setState({\n        locationName: response.data.name\n      });\n    });\n  }\n\n  render() {\n    if (this.state.lat && this.state.lon) {\n      this.getWeather();\n    }\n\n    let imgsrc;\n\n    if (this.state.weather === \"Clouds\") {\n      imgsrc = require('./../icons/Clouds.png');\n    }\n\n    if (this.state.weather === \"Rain\") {\n      imgsrc = require('./../icons/Rain.png');\n    }\n\n    if (this.state.weather === \"Clear\") {\n      imgsrc = require('./../icons/Rain.png');\n    }\n\n    let img;\n\n    if (imgsrc) {\n      img = /*#__PURE__*/React.createElement(\"img\", {\n        src: imgsrc,\n        alt: \"Logo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }\n      });\n    } else {\n      img = this.state.weather;\n    }\n\n    let temp;\n\n    if (this.state.temp) {\n      temp = /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }\n      }, this.state.temp, \" degress\");\n    }\n\n    let locationName;\n\n    if (this.state.locationName) {\n      locationName = /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 24\n        }\n      }, this.state.locationName);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, img), /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, temp)), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, locationName)));\n  }\n\n}\n\nexport default WeatherPreview;","map":{"version":3,"sources":["/Users/ozmatron/therapy-client/src/components/weather.js"],"names":["React","axios","Grid","Row","Col","clouds","WeatherPreview","Component","constructor","props","state","lat","lon","temp","weather","locationName","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","setState","getWeather","get","then","response","Math","round","data","main","name","render","imgsrc","require","img"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport clouds from './Clouds.png';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        lat: null,\n        lon: null,\n        temp: null,\n        weather: null,\n        locationName: null\n    };\n  }\n\n  componentDidMount() {\n    var lat = null\n    var lon = null\n    if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition(position => {       \n            if (position.coords.latitude && position.coords.longitude) {\n                lat = position.coords.latitude;\n                lon = position.coords.longitude\n                this.setState({lat: lat}) \n                this.setState({lon: lon});\n            }\n          });\n    }\n  }\n\n  getWeather() {\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&appid=d0a10211ea3d36b0a6423a104782130e`)\n    .then((response) => {\n      this.setState({temp: Math.round(response.data.main.temp -273.15)}) \n      this.setState({weather: response.data.weather[0].main})\n      this.setState({locationName: response.data.name})\n    })\n  }\n\n  render() {\n    if (this.state.lat && this.state.lon) {\n        this.getWeather();\n    }\n    let imgsrc\n    if (this.state.weather === \"Clouds\") {\n        imgsrc = require('./../icons/Clouds.png')\n    }\n    if (this.state.weather === \"Rain\") {\n        imgsrc = require('./../icons/Rain.png')\n    }\n    if (this.state.weather === \"Clear\") {\n        imgsrc = require('./../icons/Rain.png')\n    }\n    let img\n    if (imgsrc) {\n        img = <img src={imgsrc} alt=\"Logo\" />;\n    }\n    else {\n        img = this.state.weather\n    }\n    let temp\n    if (this.state.temp) {\n        temp = <h3>{this.state.temp} degress</h3>\n    }\n    let locationName\n    if (this.state.locationName) {\n        locationName = <h3>{this.state.locationName}</h3>\n    }\n\n    return (\n        <React.Fragment>\n        <Row>\n            <Col xs={6} >\n                {img}\n            </Col>\n            <Col xs={6}>\n                {temp}\n            </Col>\n        </Row>\n        <Row>\n            <Col xs={12} >\n                {locationName}\n            </Col>\n        </Row>\n        </React.Fragment>\n    );\n  }\n}\n\nexport default WeatherPreview;"]},"metadata":{},"sourceType":"module"}