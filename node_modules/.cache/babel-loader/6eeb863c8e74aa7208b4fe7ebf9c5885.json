{"ast":null,"code":"var _jsxFileName = \"/Users/ozmatron/therapy_box/client/src/components/weather.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // lat: 51.4939446,\n      // lon: -0.0841836\n      lat: 0,\n      lon: 0\n    };\n  }\n\n  componentDidMount() {\n    var lat = null;\n    var lon = null; // if (\"geolocation\" in navigator) {\n    //     navigator.geolocation.getCurrentPosition(function(position) {       \n    //         if (position.coords.latitude && position.coords.longitude) {\n    //             console.log(\"Latitude is :\", position.coords.latitude);\n    //             console.log(\"Longitude is :\", position.coords.longitude);\n    //             lat = position.coords.latitude;\n    //             lon = position.coords.longitude\n    //         }\n    //       });\n    //       console.log(\"Lat is :\", lat);\n    //       console.log(\"Lon is :\", lon);\n    //     if (lat && lon) {\n    //         this.setState({lat: lat}) \n    //         this.setState({lon: lon});\n    //     }\n    // }\n\n    console.log(getPosition());\n  }\n\n  getPosition() {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        if (position.coords.latitude && position.coords.longitude) {\n          console.log(\"Latitude is :\", position.coords.latitude);\n          console.log(\"Longitude is :\", position.coords.longitude);\n          return position;\n        }\n      });\n    }\n  }\n\n  render() {\n    console.log(\"Latitude is :\", this.state.lat);\n    console.log(\"Longitude is :\", this.state.lon);\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, this.state.name);\n  }\n\n}\n\nexport default WeatherPreview;","map":{"version":3,"sources":["/Users/ozmatron/therapy_box/client/src/components/weather.js"],"names":["React","axios","WeatherPreview","Component","constructor","props","state","lat","lon","componentDidMount","console","log","getPosition","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","render","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACT;AACA;AACAC,MAAAA,GAAG,EAAE,CAHI;AAITC,MAAAA,GAAG,EAAE;AAJI,KAAb;AAMD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIF,GAAG,GAAG,IAAV;AACA,QAAIC,GAAG,GAAG,IAAV,CAFkB,CAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYC,WAAW,EAAvB;AACD;;AAEDA,EAAAA,WAAW,GAAG;AACZ,QAAI,iBAAiBC,SAArB,EAAgC;AAC5BA,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAASC,QAAT,EAAmB;AACxD,YAAIA,QAAQ,CAACC,MAAT,CAAgBC,QAAhB,IAA4BF,QAAQ,CAACC,MAAT,CAAgBE,SAAhD,EAA2D;AACvDT,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BK,QAAQ,CAACC,MAAT,CAAgBC,QAA7C;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BK,QAAQ,CAACC,MAAT,CAAgBE,SAA9C;AACA,iBAAOH,QAAP;AACH;AACF,OANH;AAOH;AACF;;AAEDI,EAAAA,MAAM,GAAG;AACPV,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKL,KAAL,CAAWC,GAAxC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B,KAAKL,KAAL,CAAWE,GAAzC;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKF,KAAL,CAAWe,IAAhB,CADF;AAGD;;AAnD0C;;AAsD7C,eAAenB,cAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass WeatherPreview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        // lat: 51.4939446,\n        // lon: -0.0841836\n        lat: 0,\n        lon: 0\n    };\n  }\n\n  componentDidMount() {\n    var lat = null\n    var lon = null\n    // if (\"geolocation\" in navigator) {\n    //     navigator.geolocation.getCurrentPosition(function(position) {       \n    //         if (position.coords.latitude && position.coords.longitude) {\n    //             console.log(\"Latitude is :\", position.coords.latitude);\n    //             console.log(\"Longitude is :\", position.coords.longitude);\n    //             lat = position.coords.latitude;\n    //             lon = position.coords.longitude\n    //         }\n    //       });\n    //       console.log(\"Lat is :\", lat);\n    //       console.log(\"Lon is :\", lon);\n    //     if (lat && lon) {\n    //         this.setState({lat: lat}) \n    //         this.setState({lon: lon});\n    //     }\n    // }\n    console.log(getPosition())\n  }\n\n  getPosition() {\n    if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition(function(position) {       \n            if (position.coords.latitude && position.coords.longitude) {\n                console.log(\"Latitude is :\", position.coords.latitude);\n                console.log(\"Longitude is :\", position.coords.longitude);\n                return position\n            }\n          });\n    }\n  }\n\n  render() {\n    console.log(\"Latitude is :\", this.state.lat);\n    console.log(\"Longitude is :\", this.state.lon);\n    return (\n      <h1>{this.state.name}</h1>\n    );\n  }\n}\n\nexport default WeatherPreview;"]},"metadata":{},"sourceType":"module"}